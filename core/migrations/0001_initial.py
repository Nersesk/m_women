# Generated by Django 4.2.5 on 2023-10-02 14:52

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BusinessPartners',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_eng', models.CharField(max_length=255, verbose_name='Name in English')),
                ('name_arm', models.CharField(max_length=255, verbose_name='Name in Armenian')),
                ('image', models.ImageField(upload_to='business_partners/', verbose_name='Image')),
                ('duration', models.IntegerField(verbose_name='Duration')),
                ('projects_count', models.IntegerField(verbose_name='Count of projects')),
            ],
            options={
                'verbose_name': 'Business Partner',
                'verbose_name_plural': 'Business Partners',
            },
        ),
        migrations.CreateModel(
            name='JobAnnouncement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_eng', models.CharField(max_length=255, verbose_name='Job name in English')),
                ('name_arm', models.CharField(max_length=255, verbose_name='Job name in Armenian')),
                ('image', models.ImageField(upload_to='Jobs/', verbose_name='Image')),
                ('description_eng', ckeditor.fields.RichTextField(verbose_name='Job description in English')),
                ('description_arm', ckeditor.fields.RichTextField(verbose_name='Job description in Armenian')),
                ('company_name_eng', models.CharField(max_length=255, verbose_name='Company name in English')),
                ('company_name_arm', models.CharField(max_length=255, verbose_name='Company name in Armenian')),
                ('duration_eng', models.CharField(max_length=255, verbose_name='Job duration in English')),
                ('duration_arm', models.CharField(max_length=255, verbose_name='Job duration in Armenian')),
                ('assessment_desc_eng', ckeditor.fields.RichTextField(verbose_name='Assessment Service Description in English')),
                ('assessment_desc_arm', ckeditor.fields.RichTextField(verbose_name='Assessment Service Description in Armenian')),
                ('appraiser_requirements_eng', ckeditor.fields.RichTextField(verbose_name='Requirements to the appraiser in English')),
                ('appraiser_requirements_arm', ckeditor.fields.RichTextField(verbose_name='Requirements to the appraiser in Armenian')),
                ('application_procedure_eng', ckeditor.fields.RichTextField(verbose_name='Application Procedure in English')),
                ('application_procedure_arm', ckeditor.fields.RichTextField(verbose_name='Application Procedure in Armenian')),
                ('about_company_eng', ckeditor.fields.RichTextField(verbose_name='About the company in English')),
                ('about_company_arm', ckeditor.fields.RichTextField(verbose_name='About the company in Armenian')),
                ('contacts', ckeditor.fields.RichTextField(verbose_name='Contacts')),
                ('created', models.DateTimeField(auto_now=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now_add=True, verbose_name='Updated')),
                ('active', models.BooleanField(default=True, verbose_name='Is Active?')),
            ],
            options={
                'verbose_name': 'Job Announcement',
                'verbose_name_plural': 'Job Announcements',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_eng', models.CharField(max_length=255, verbose_name='Name in English')),
                ('name_arm', models.CharField(max_length=255, verbose_name='Name in Armenian')),
                ('description_eng', models.TextField(verbose_name='Description in English')),
                ('description_arm', models.TextField(verbose_name='Description in Armenian')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
            },
        ),
        migrations.CreateModel(
            name='Programs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_eng', models.CharField(max_length=255, verbose_name='Name in English')),
                ('name_arm', models.CharField(max_length=255, verbose_name='Name in Armenian')),
                ('title_eng', models.CharField(max_length=255, verbose_name='Title in English')),
                ('title_arm', models.CharField(max_length=255, verbose_name='Title in Armenian')),
                ('article_eng', ckeditor.fields.RichTextField(verbose_name='Article in English')),
                ('article_arm', ckeditor.fields.RichTextField(verbose_name='Article in Armenian')),
            ],
            options={
                'verbose_name': 'Program',
                'verbose_name_plural': 'Programs',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_eng', models.CharField(max_length=255, verbose_name='Name in English')),
                ('name_arm', models.CharField(max_length=255, verbose_name='Name in Armenian')),
                ('image', models.ImageField(upload_to='report/', verbose_name='Image')),
                ('report_file', models.FileField(upload_to='report_file/', verbose_name='File')),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_eng', models.CharField(max_length=255, verbose_name='Name in English')),
                ('name_arm', models.CharField(max_length=255, verbose_name='Name in Armenian')),
                ('position_eng', models.CharField(max_length=255, verbose_name='Position in English')),
                ('position_arm', models.CharField(max_length=255, verbose_name='Position in Armenian')),
                ('image', models.ImageField(upload_to='staff/', verbose_name='Image')),
            ],
            options={
                'verbose_name': 'Staff',
                'verbose_name_plural': 'Staff',
            },
        ),
        migrations.CreateModel(
            name='ProgramsPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='program_photos/', verbose_name='Image')),
                ('main_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.programs')),
            ],
            options={
                'verbose_name': 'Programs Photo',
                'verbose_name_plural': 'Programs Photos',
            },
        ),
        migrations.CreateModel(
            name='ProgramFiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='program_files/', verbose_name='Image')),
                ('main_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.programs')),
            ],
            options={
                'verbose_name': 'Program File',
                'verbose_name_plural': 'Program Files',
            },
        ),
        migrations.CreateModel(
            name='ProductFiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='', verbose_name='File')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
            ],
            options={
                'verbose_name': 'Product File',
                'verbose_name_plural': 'Product Files',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
